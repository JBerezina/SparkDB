[0m[[0m[0mdebug[0m] [0m[0m> Exec(run, Some(6ea59b8e-a25e-4274-b0d5-fe3d413cc393), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / run[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to C:\Users\Home\Desktop\Big-Data\project2\target\scala-2.11\classes ...[0m
[0m[[0m[31merror[0m] [0m[0morg.apache.spark.sql.AnalysisException: cannot resolve '`Datetime`' given input columns: [cleandata.Country, cleandata.Product_Name, date, cleandata.QTY];;[0m
[0m[[0m[31merror[0m] [0m[0m'Project [Country#213, Product_Name#230, 'Datetime, QTY#196][0m
[0m[[0m[31merror[0m] [0m[0m+- Project [Country#213, Product_Name#230, date_format(cast(to_date(Datetime#173, Some(dd-MM-yy)) as timestamp), yyyy-MM-dd, Some(America/New_York)) AS date#253, QTY#196][0m
[0m[[0m[31merror[0m] [0m[0m   +- SubqueryAlias cleandata[0m
[0m[[0m[31merror[0m] [0m[0m      +- Sort [Datetime#173 ASC NULLS FIRST], true[0m
[0m[[0m[31merror[0m] [0m[0m         +- Filter (((((isnotnull(cast(QTY#196 as int)) && Country#213 IN (Australia,Germany,China,Canada,Japan,United States)) && Product_Name#230 RLIKE ^[A-Z]) && NOT (cast(Product_Name#230 as string) = NULL)) && isnotnull(Datetime#173)) && Datetime#173 RLIKE ^[0-9])[0m
[0m[[0m[31merror[0m] [0m[0m            +- Project [Country#213, Product_Name#230, Datetime#173, QTY#196][0m
[0m[[0m[31merror[0m] [0m[0m               +- Project [Order_id#164, Customer_id#165, Customer_name#166, Product_ID#167, cast(Product_Name#168 as string) AS Product_Name#230, Product_Category#169, Payment Type#170, QTY#196, Price#172, Datetime#173, Country#213, City#175, ecommerce_website_name#176, Payment Transaciton ID#177, Payment Status#178, Notes#179][0m
[0m[[0m[31merror[0m] [0m[0m                  +- Project [Order_id#164, Customer_id#165, Customer_name#166, Product_ID#167, Product_Name#168, Product_Category#169, Payment Type#170, QTY#196, Price#172, Datetime#173, cast(Country#174 as string) AS Country#213, City#175, ecommerce_website_name#176, Payment Transaciton ID#177, Payment Status#178, Notes#179][0m
[0m[[0m[31merror[0m] [0m[0m                     +- Project [Order_id#164, Customer_id#165, Customer_name#166, Product_ID#167, Product_Name#168, Product_Category#169, Payment Type#170, cast(QTY#171 as int) AS QTY#196, Price#172, Datetime#173, Country#174, City#175, ecommerce_website_name#176, Payment Transaciton ID#177, Payment Status#178, Notes#179][0m
[0m[[0m[31merror[0m] [0m[0m                        +- Relation[Order_id#164,Customer_id#165,Customer_name#166,Product_ID#167,Product_Name#168,Product_Category#169,Payment Type#170,QTY#171,Price#172,Datetime#173,Country#174,City#175,ecommerce_website_name#176,Payment Transaciton ID#177,Payment Status#178,Notes#179] csv[0m
[0m[[0m[31merror[0m] [0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:92)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:89)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:289)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:289)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:288)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$transformExpressionsUp$1.apply(QueryPlan.scala:95)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$transformExpressionsUp$1.apply(QueryPlan.scala:95)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:107)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:107)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpression$1(QueryPlan.scala:106)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:118)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1$1.apply(QueryPlan.scala:122)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.AbstractTraversable.map(Traversable.scala:104)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:122)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:127)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:187)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions(QueryPlan.scala:127)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:95)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:89)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:84)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:127)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:84)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:92)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:105)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:57)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:55)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:47)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:74)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$withPlan(Dataset.scala:3301)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.Dataset.select(Dataset.scala:1312)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.Dataset.select(Dataset.scala:1330)[0m
[0m[[0m[31merror[0m] [0m[0m	at project2$.prodPop(project2.scala:122)[0m
[0m[[0m[31merror[0m] [0m[0m	at project2$.main(project2.scala:33)[0m
[0m[[0m[31merror[0m] [0m[0m	at project2.main(project2.scala)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.reflect.Method.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.invokeMain(Run.scala:143)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.execute$1(Run.scala:93)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.$anonfun$runWithLoader$5(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run$.executeSuccess(Run.scala:186)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.runWithLoader(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$bgRunTask$6(Defaults.scala:1983)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$termWrapper$2(Defaults.scala:1922)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.util.Try$.apply(Try.scala:213)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.BackgroundThreadPool$BackgroundRunnable.run(DefaultBackgroundJobService.scala:369)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.Thread.run(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m(Compile / [31mrun[0m) org.apache.spark.sql.AnalysisException: cannot resolve '`Datetime`' given input columns: [cleandata.Country, cleandata.Product_Name, date, cleandata.QTY];;[0m
[0m[[0m[31merror[0m] [0m[0m'Project [Country#213, Product_Name#230, 'Datetime, QTY#196][0m
[0m[[0m[31merror[0m] [0m[0m+- Project [Country#213, Product_Name#230, date_format(cast(to_date(Datetime#173, Some(dd-MM-yy)) as timestamp), yyyy-MM-dd, Some(America/New_York)) AS date#253, QTY#196][0m
[0m[[0m[31merror[0m] [0m[0m   +- SubqueryAlias cleandata[0m
[0m[[0m[31merror[0m] [0m[0m      +- Sort [Datetime#173 ASC NULLS FIRST], true[0m
[0m[[0m[31merror[0m] [0m[0m         +- Filter (((((isnotnull(cast(QTY#196 as int)) && Country#213 IN (Australia,Germany,China,Canada,Japan,United States)) && Product_Name#230 RLIKE ^[A-Z]) && NOT (cast(Product_Name#230 as string) = NULL)) && isnotnull(Datetime#173)) && Datetime#173 RLIKE ^[0-9])[0m
[0m[[0m[31merror[0m] [0m[0m            +- Project [Country#213, Product_Name#230, Datetime#173, QTY#196][0m
[0m[[0m[31merror[0m] [0m[0m               +- Project [Order_id#164, Customer_id#165, Customer_name#166, Product_ID#167, cast(Product_Name#168 as string) AS Product_Name#230, Product_Category#169, Payment Type#170, QTY#196, Price#172, Datetime#173, Country#213, City#175, ecommerce_website_name#176, Payment Transaciton ID#177, Payment Status#178, Notes#179][0m
[0m[[0m[31merror[0m] [0m[0m                  +- Project [Order_id#164, Customer_id#165, Customer_name#166, Product_ID#167, Product_Name#168, Product_Category#169, Payment Type#170, QTY#196, Price#172, Datetime#173, cast(Country#174 as string) AS Country#213, City#175, ecommerce_website_name#176, Payment Transaciton ID#177, Payment Status#178, Notes#179][0m
[0m[[0m[31merror[0m] [0m[0m                     +- Project [Order_id#164, Customer_id#165, Customer_name#166, Product_ID#167, Product_Name#168, Product_Category#169, Payment Type#170, cast(QTY#171 as int) AS QTY#196, Price#172, Datetime#173, Country#174, City#175, ecommerce_website_name#176, Payment Transaciton ID#177, Payment Status#178, Notes#179][0m
[0m[[0m[31merror[0m] [0m[0m                        +- Relation[Order_id#164,Customer_id#165,Customer_name#166,Product_ID#167,Product_Name#168,Product_Category#169,Payment Type#170,QTY#171,Price#172,Datetime#173,Country#174,City#175,ecommerce_website_name#176,Payment Transaciton ID#177,Payment Status#178,Notes#179] csv[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 24 s, completed May 31, 2022 6:05:16 PM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
